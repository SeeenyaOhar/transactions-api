openapi: 3.0.3
info:
  title: Transactions API - OpenAPI 3.0
  version: 1.0.0
servers:
  - url: http://20.31.156.125/api/
tags:
  - name: user
    description: User operations
  - name: transaction
    description: Access to transactions
paths:
  /transaction:
    get:
      tags:
        - transaction
      summary: Get all transactions of a user
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
      security:
        - JWTSecurity: []
    post:
      summary: Create a new transaction
      tags:
        - transaction
      requestBody:
        $ref: "#/components/requestBodies/Transaction"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                
                type: object
                properties:
                  id:
                    description: Id of a created transaction
                    type: integer
                    
                example: "123"
      security:
        - JWTSecurity: []
                
  /user:
    post:
      tags:
        - user
      summary: Create/sign up a user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      summary: Modify a user
      tags: 
        - user
      requestBody:
        description: User to modify
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    msg:
                      type: string
                      example: "Sucessfully changed the user"
                    user: 
                      $ref: '#/components/schemas/User'
              application/xml:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: There might be some problem with fields specified(e.g. incorrect email address)
      security:
        - JWTSecurity: []
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        $ref: "#/components/requestBodies/Credentials"
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          
  
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: John
        surname:
          type: string
          example: Wick
        email:
          type: string
          example: john@email.com
        password:
          type: string
          format: password
    Transaction:
      required:
        - date
        - category
        - tag
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        date:
          type: string
          format: date-time
          example: "24/02/2022 05:00:00"
        category:
          type: string
        tag:
          type: string
      xml:
        name: transaction
  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
        application/xml:
          schema:
            $ref: '#/components/schemas/User'
    Transaction:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transaction'
        application/xml:
          schema:
            $ref: '#/components/schemas/Transaction'
    Credentials:
      content: 
        application/json:
          schema: 
            type: object
            properties:
              email:
                type: string
                format: email
                example: "example@gmail.com"
              password:
                type: string
                format: password
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    JWTSecurity:
      type: http
      scheme: bearer
    